////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Hello World!

#include <iostream>

using namespace std;

  int main()
  {
      cout << "Hello World!\n";
  }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Подключение библиотеки :

  #include <библиотека>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Начало блока задач

  int main()
  {
    //Код
  }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Локализация (Русский текст) :

  setlocale (0, "");
  // Только внутри блока {}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  // Использование имён std

  using namespace std;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Переход на новую строку (конец данной строки) endl

  std::cout << "message" << endl;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Escape - последовательности

/*

  \b - Удаление последнего выведенного символа
  \n - Перейти на начало новой строки
  \t - Перейти к следующей позиции табулции

////////////////////////////////////////////////////////////////////

  \\ - Вывести \
  \" - Вывести "
  \' - Вывести '

*/

   Применение : std::cout << "message" << '\n';
   Альтернатива : std::cout << "message \n";

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  // Вывод на экран cout

  // Текст
    std::cout << "message" << '\n';
  // При using namespace std;
    cout << "message" << '\n';
  // Переменная
    std::cout << a << '\n';

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Переменные :

/*
  Типы данных :

  https://itandlife.ru/programming/cpp/tipy-dannyx-c/

  Пример на int :
*/
  Переменная int
  Обьявление : int a; (int a, b, c;)
  Значение переменной : a = 0;
  Альтернатива : int a = 0; (int a = 0, b = 1, c = 2;)
//  !!!Дробные числа вводить через . (точку), а не через , (Запятую)

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Константы const :

//  Как и с обьявлением переменной но с добавление const перед переменной :
  const int COUNT_DAYS_IN_WEEK = 7;
//  Используется для постоянного хранени данных без возмодности изменить их в компеляторе

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Ввод данных cin :

  int a;
  cout << "Введите значение переменной a" << '\n';
  cin >> a >> '\n';

//  Программа запросит ввод значения для переменной a

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Операторы (Действия с данными) :
/*
Унарные : -a (меняет знак на противоположный)
Бинарные : +(плюс), -(минус), *(умножить), /(поделить), %(поделить по модулю), ==(равен), !=(не равен), <(меньше), >(больше), <=(меньше или равно), >=(больше или равно).
Тернарные :
*/

  int a = 1;
  int b = 2;
  int c; // Возможно указать свое выражение : int c = 1 + 2;
  c = a + b;
  cout << c << '\n';
  // Или при выводе без обьявления переменной c : cout << a + b << '\n';

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Инкремент и декремент :

/*
int a = 0
a++; / a--; // Увеличивает или уменьшает значение на еденицу (1)
*/

  int a = 0;
  a = a + 1;
  a = a - 1;

  int a = 0;
  // Постфиксная форма (ниже приоритет, выполняется после выведения переменной)
  a++; // a = a + 1;
  a--; //a = a - 1;
  // Префиксная форма (выше приоритет, выполняется перед выведением переменной)
  ++a;
  --a;

// Для более простой и читабельной записи кода

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Сокращенные арифметические формы

  int a = 0;
  a += 1;
  a -= 1;
  a *= 1;
  ...

// Для более простой и читабельной записи кода

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Логические операции

/*
  // Операторы сравнения

  < - меньше
  > - больше
  <= - меншьше / равно
  >= - больше / равно

  // Операторы равенства

  == - равно
  != - не равно

  // логические операторы обьеденени и отрицательная инверсия

  && - и
  || - или
  != - не

  ! - инверсия (перед выражением)
*/
int main()
  {
      int a = 1
      int b = 2
      cout << a <= b << endl; // Выведится 1 если да и 0 если нет
  }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Конструкция логического выбора if

/*
if (утверждение)
{
    Дейтвие
}
else
{
    Действие если утверждение не выполнено
}
*/

bool rain = true //false

if (rain)
{
    cout << "Идёт дождь" << endl; // если true
}
else
{
    cout << "Дождь не идёт" << endl; // если false
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Оператор множественного выбора Switch

int main()
{
    int a;
    cin >> a;

    switch (a)
    {
    case 1:
        cout << "действие если введено 1" << endl;
        break;
    case 2:
        cout << "действие если введено 2" << endl;
        break;


    default:
        cout << "Стандартный ответ на введеное значение не предусмотреное программой" << endl;
        break;
    }

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Цикл while

/*
while (утверждение)
{
    действие для повторения;
}
*/

int main()
{
    int a = 0;
    while (a < 10)
    {
        cout << "a меньше 10, когда а будет = 10, цикл прекраится" << endl;
        a++; // увеличивает a на 1
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\

// Цикл do while (как и с while но проверка на истинность проверяетс в конце выполнения действия)
// если утверждение неверное цыкл в любом случаи выполнится 1 раз! т.к. проверка на верность идёт после выполнения кода.

int main()
{
    int a = 0;

    do
    {
        cout << "a меньше 10, когда а будет = 10, цикл прекраится" << endl;
        a++;
    } while (a < 10)
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Цикл for

/*
   можно не инициализировать переменную в ( ) тогда нужно вынести её за цикл
   int a = 0;
   for ( ; a < 10; a++)
   ";" точка с запятой обязаны оставатся в ( ) for
   так же итератор a++ можно вынести из ( ) в сам код { } for (int a = 0; a < 10; )
   Если убрать проверку цикла, в данном случаи это a < 10 то тогда цикл будет бесконечным если его не завершить другим способом for (int a = 0; ; a++)
*/

for (int a = 0; a < 10; a++)
{
    cout << "Переменная a = " << a << endl; // выводит значение переменной a
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Ключевое слово break

for (int i = 0; ; i++)
{
    cout << "Бесконечный цыкл без проверки" << endl;
    a++;

    if (i = 10) // Проверка внутри кода вместо проверки внутри ( ) for
    {
        break; // Завершение цыкла (выход из него дальше по коду (если есть) или в начало)
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Ключевое слово continue

/*
Призывает цикл сразу же перейти к следующей итерации (Пропуск определеной части кода)
Пример кодом на цыкле for который веведет числа от 1 до 9, но не выведет число 5 которое будет пропущено ключквыс словом continue
*/

for (int i = 0; ; i++)
{
    if (i == 5)
    {
        continue;
    }
    cout << "i =" << i << endl;
    a++;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Закрывается консоль в .exe решение пауза
{
    system("pause");
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Оператор перехода goto

{
    cout << "1" << endl;

    goto link; // goto перейдет на ссылку ниже пропуская код 2 и 3

    cout << "2" << endl;

    cout << "3" << endl;

    link: // Ссылка на которую перейдёт goto

    cout << "4" << endl;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Отладчик кода

/*
Нужен для проверки кода на ошибки
Запускается на F10 в начале программы, или весь код на F5
Если нужно проверить конкретное место в коде - ставим точку остановы в левой части кода
перед цыфрами нажать мышкой на серое поле на строке или перед ней с которой нужно начать отладку
или нажать F9 и точка остановы поставится автоматически на той строке которая выбрана (на ней стоит курсор)
*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Где лежит .exe программа написаного кода

/*
В обозревателе решений нажать на решение "Название" правой кнопкой мыши
выбрать пункт "Открыть папку в проводнике"
.exe фаил будет лежать в папке Debug или Release в том случаи если программа хоть раз запускалась
в Visual Studio или собиралась (компелировалась).
*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Вложенный цикл

/*
Вложенный цикл это цикл внутри цикла - при выполнении основного цикла код доходит до цикла внутри цикла
и вложенный цикл отрабатывает полностью, по окончанию выходит и снова запускает основной цикл в котором
он доходит до внутреннего и так по кругу до окончани работы основного цикла.
*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Массив, Двумерный массив

/*
Массив содержит в себе (несколько) элементов с определённым индексом (адрес как в игре морской бой цифры и буквы)
Индекс массива по цифрам всегда начинается с 0! если в массиве 3 элемента то они будут находится под индексами - 1 - 0, 2 - 1, 3 - 2 !!!
*/

int(имя масива) arr [Количество элементов] [5];
//заполнение массива
arr[0] = 5;
arr[1] = 3;
...
//Обращение к массиву 
имя массива[индекс];

x[n];

//Двумерный массив

xx[n][m];

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Факториал

int Fact(int N)
{
    if (N == 0)
        return 0;
    if (N == 1)
        return 1;
    return N * Fact(N - 1);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Функции

/*
Однообразный блок кода который нужно использовать много раз в программе можно вынести за основной блок{} в отдельный блок называемый функцией
например заполнение массива или определение средненего значения.
*/

double Avg(int* mas, int num)
{
    int mean = 0;
    for (int i = 0; i < num; i++)
    {
        mean += *mas++;
    }
    return (double)mean / num;
}

cout << Avg(arr, N) << endl;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Шаблоны функций

template <typename T> // template <typename T1, T2>
T Sum(T a, T b) // T1 Sum(T1 a, T2 b)
{
    return a + b;
}

// typename можно заменить на class, использовать можно только 1 из!

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Перегрузка функций

int Sum(int a, int b)
{
    return a + b;
}

double Sum(int a, int b)
{
    return a + b;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Указатели

int a = 5;

int *px = &a;

// Обращение к адресу px

cout << px;

// Обращение к данным по адресу px

cout << *px;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////